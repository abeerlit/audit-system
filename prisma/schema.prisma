generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TempUser {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  phoneNumber String?
  firstName   String
  lastName    String?
  experience  Int?
  specialty   String?
  otpVerified Boolean  @default(false)
  otp         String
  password    String
  createdAt   DateTime @default(now())
}

enum Role {
  admin
  broker
  expert
}

enum ChapterActions {
  new
  accept
  skip
  edit
  flag
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  phoneNumber  String?
  profileImage String?
  firstName    String
  lastName     String?
  experience   Int?
  specialty    String?
  otpVerified  Boolean       @default(false)
  password     String
  isActive     Boolean       @default(true)
  role         Role          @default(broker)
  createdAt    DateTime      @default(now())

  chapterItems ChapterItem[] // One-to-many relation to ChapterItem
  chapter     Chapters[]     // One-to-many relation to Section
  comments     Comments[]     // One-to-many relation to Comment
  sessions    Session[]
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  otp        String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model ChapterItem {
  id                      Int       @id @default(autoincrement())
  itemAction              String?   @default("new")
  chapter_id              Int
  item_name               String
  item_link               String?
  item_image              String?
  item_price              Float?
  item_weight             Float?
  item_detail             String?
  search_sentence         String?
  original_hs_code        Int?
  broker_hs_code          Int?
  expert_hs_code          Int?
  created_timestamp       DateTime  @default(now())
  broker_update_timestamp DateTime?
  expert_update_timestamp DateTime?
  status                  String?
  expert_status           String?

  brokerName   User?      @relation(fields: [broker_id], references: [id])
  broker_id    Int?       // Foreign key for brokerName

  chapter      Chapters    @relation(fields: [chapter_id], references: [id]) // Relation to Chapters
  comments     Comments[]  // One-to-many relation to Comment
}

model ChapterNames {
  id           Int       @id @default(autoincrement())
  chapter_name String
  createdAt    DateTime  @default(now())

  chapters     Chapters[] // One-to-many relation to Section
}

model Chapters {
  id           Int           @id @default(autoincrement())
  chapterNames_id   Int           // Foreign key for Chapters
  chapter_name String        // Store chapter_name as well
  broker_id    Int?          // Foreign key for User (broker)
  createdAt    DateTime      @default(now())

  chapter      ChapterNames      @relation(fields: [chapterNames_id], references: [id]) // Relation to Chapters
  brokerName   User?         @relation(fields: [broker_id], references: [id]) // Relation to broker (User)
  chapterItems ChapterItem[] // One-to-many relation with ChapterItem
}

model Comments {
  id             Int         @id @default(autoincrement())
  content        String
  createdAt      DateTime    @default(now())
  
  // Relations
  user           User        @relation(fields: [user_id], references: [id])
  user_id        Int         // Foreign key to User

  chapterItem    ChapterItem @relation(fields: [chapter_item_id], references: [id])
  chapter_item_id Int        // Foreign key to ChapterItem
}

model Session {
  id         Int      @id @default(autoincrement())
  user_id     Int
  startTime  DateTime @default(now())
  endTime    DateTime?
  lastActive DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}
